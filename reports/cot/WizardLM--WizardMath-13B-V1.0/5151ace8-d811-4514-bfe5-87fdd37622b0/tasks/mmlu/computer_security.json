{
    "score": 0.65,
    "num_unmatched": 2,
    "model_outputs": [
        {
            "id": 17,
            "question": "What is Nmap?\n\n(A) It is a scanner which works by injecting packets to a range of addresses, and inferring what hosts and services might be at those addresses, based on the responses\n(B) It is a network fuzz testing tool\n(C) It is a map of the Internet\n(D) It is a suite of tools for scripting attacks: probe, construct, encode, inject, wait for response",
            "correct_answer": 0,
            "model_answer": "Nmap is a free and open source utility for network discovery and security auditing. It was created by Gordon Lyon in 1997 and is now maintained by a team of developers. Nmap is available for various operating systems, including Linux, Windows, and macOS.\n\nNmap works by sending packets to a range of IP addresses and analyzing the responses to determine the presence and characteristics of network services. It can be used to find live hosts, open ports, and operating systems, as well as to perform security audits and vulnerability assessments.\n\nThe answer is: It can be used to find live hosts, open ports, and operating systems, as well as to perform security audits and vulnerability assessments.",
            "correct": 0.25
        },
        {
            "id": 72,
            "question": "What is the difference between a direct leak and a side channel?\n\n(A) A direct leak creates a denial of service by failing to free memory, while a channel frees memory as a side effect\n(B) A direct leak is one that is intentional, rather than by unintentional\n(C) A direct leak comes via the software system's intended interaction mechanism, where as a side channel leak comes from measurements of other system features, like timing, power usage, or space usage\n(D) There is no difference",
            "correct_answer": 2,
            "model_answer": "The answer is: A direct leak comes via the software system's intended interaction mechanism, while a side channel leak comes from measurements of other system features, like timing, power usage, or space usage.",
            "correct": false
        },
        {
            "id": 97,
            "question": "What was the first buffer overflow attack?\n\n(A) Love Bug\n(B) SQL Slammer\n(C) Morris Worm\n(D) Code Red",
            "correct_answer": 2,
            "model_answer": "The first buffer overflow attack was the Morris Worm, which was released in 1988. It was written by Robert Tappan Morris, a computer science professor at Cornell University. The worm exploited a buffer overflow vulnerability in the sendmail daemon, allowing it to spread to other computers and cause disruption. The worm is considered the first Internet worm and the first major computer worm.\n\nThe answer is: The worm is considered the first Internet worm and the first major computer worm.",
            "correct": true
        },
        {
            "id": 8,
            "question": "Why apps developed in languages like C, C++ is prone to Buffer-overflow?\n\n(A) No string boundary checks in predefined functions\n(B) No storage check in the external memory\n(C) No processing power check\n(D) No database check",
            "correct_answer": 0,
            "model_answer": "The correct answer is: (A) No string boundary checks in predefined functions.",
            "correct": true
        },
        {
            "id": 32,
            "question": "Suppose Unix did not provide a way of passing file descriptors between processes, but still allowed inheriting file descriptors from a parent on fork and exec. What aspects of the OKWS design would break without file descriptor passing?\n1. It would be impossible for services to get a TCP connection to the client web browser.\n2. It would be impossible for okd to run as a non-root user.\n\n(A) True, True\n(B) False, False\n(C) True, False\n(D) False, True",
            "correct_answer": 2,
            "model_answer": "First, let's analyze the given statements:\n\n1. It would be impossible for services to get a TCP connection to the client web browser.\n2. It would be impossible for okd to run as a non-root user.\n\nStatement 1: It would be impossible for services to get a TCP connection to the client web browser.\n\nTo understand this statement, let's consider the OKWS design. In OKWS, the web server (okhttpd) listens on a TCP port for incoming connections. When a client connects to the web server, a TCP connection is established between the client and the web server.\n\nHowever, without the ability to pass file descriptors between processes, the OKWS design would break in this scenario because:\n\n- The web server (okhttpd) would not be able to pass the TCP connection file descriptor to the client web browser process.\n- The client web browser process would not be able to inherit the TCP connection file descriptor from the web server process.\n\nAs a result, the client web browser would not be able to establish a TCP connection with the web server, and the OKWS design would not work as intended.\n\nStatement 2: It would be impossible for okd to run as a non-root user.\n\nIn the OKWS design, the okd process is responsible for starting the okhttpd web server and the okjpd Java process. To start these processes, okd needs to execute them with the appropriate permissions.\n\nHowever, without the ability to pass file descriptors between processes, the OKWS design would break in this scenario because:\n\n- okd would not be able to pass the file descriptors of the OKWS services (okhttpd and okjpd) to the newly spawned OKWS child processes.\n- The child processes would not be able to inherit the file descriptors of the OKWS services from the okd process.\n\nAs a result, okd would not be able to start the OKWS services, and the OKWS design would not work as intended.\n\nIn conclusion, both statements are True. Without file descriptor passing, the OKWS design would break in the given scenarios.\n\nThe answer is: Without file descriptor passing, the OKWS design would break in the given scenarios.",
            "correct": 0.25
        },
        {
            "id": 15,
            "question": "_______________ is the central node of 802.11 wireless operations.\n\n(A) WPA\n(B) Access Point\n(C) WAP\n(D) Access Port",
            "correct_answer": 1,
            "model_answer": "The central node of 802.11 wireless operations is the Access Point (B).\n\nThe answer is: The central node of 802.11 wireless operations is the Access Point (B).",
            "correct": true
        },
        {
            "id": 63,
            "question": "Old operating systems like _______ and NT-based systems have buffer-overflow attack a common vulnerability.\n\n(A) Windows 7\n(B) Chrome\n(C) IOS12\n(D) UNIX",
            "correct_answer": 3,
            "model_answer": "The answer is: (D) UNIX.",
            "correct": true
        },
        {
            "id": 57,
            "question": "A proxy rewall lters at the\n\n(A) Physical layer\n(B) Application layer\n(C) Data link layer\n(D) Network layer",
            "correct_answer": 1,
            "model_answer": "A proxy rewall lters at the network layer.\n\nThe answer is: A proxy rewall lters at the network layer.",
            "correct": false
        },
        {
            "id": 60,
            "question": "How does a buffer overflow on the stack facilitate running attacker-injected code?\n\n(A) By overwriting the return address to point to the location of that code\n(B) By writing directly to the instruction pointer register the address of the code\n(C) By writing directly to %eax the address of the code\n(D) By changing the name of the running executable, stored on the stack",
            "correct_answer": 0,
            "model_answer": "A buffer overflow on the stack can facilitate running attacker-injected code by overwriting the return address to point to the location of that code. This is the correct answer.\n\nThe answer is: A buffer overflow on the stack can facilitate running attacker-injected code by overwriting the return address to point to the location of that code. This is the correct answer.",
            "correct": true
        },
        {
            "id": 83,
            "question": "___________________ began to show up few years back on wireless access points as a new way of adding or connecting new devices.\n\n(A) WPA2\n(B) WPA\n(C) WPS\n(D) WEP",
            "correct_answer": 2,
            "model_answer": "The answer is: WPS.",
            "correct": true
        }
    ]
}